# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_20QVR1szTCkV43cLngsUR2vC_Yw6cHm
"""

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

!ls -la gdrive/MyDrive/skincancer/hmnist_28_28_RGB.csv

from keras.datasets import mnist
import matplotlib.pyplot as plt
from keras.models import Sequential, load_model
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.utils import np_utils
from keras import backend as K
from keras.preprocessing.image import img_to_array , load_img
import numpy as np 
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.cm

df= pd.read_csv('gdrive/MyDrive/skincancer/hmnist_28_28_RGB.csv')

dfnl  = pd.DataFrame(df)
dfnlpy =  dfnl.drop(['label'], axis=1).to_numpy()
dfnlpy= dfnlpy.reshape(dfnlpy.shape[0], 28,int(dfnlpy.shape[1]/28))
dfnlpy.shape

xtrain, xtest, ytrain, ytest = train_test_split(
    dfnlpy,df.label    )

plt.figure(0)
plt.subplot(221)
plt.imshow(dfnlpy[1])
plt.subplot(222)
plt.imshow(dfnlpy[2])

img_rows, img_cols = 84,28
xtrain= xtrain.reshape(xtrain.shape[0], img_rows, img_cols,1)
xtest= xtest.reshape(xtest.shape[0],img_rows,img_cols,1)
xtrain=xtrain/255
xtest = xtest/255
ytrain = np_utils.to_categorical(ytrain)
ytest= np_utils.to_categorical(ytest)

numclasses = ytest.shape[1]
input_shape = (img_rows,img_cols, 1)

model = Sequential()
model.add(Conv2D(32,(5,5),input_shape=(84,28,1),activation='relu'))
model.add(MaxPooling2D(pool_size=(5,5)))
model.add(Conv2D(64,(2,2),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(32, activation='tanh'))
model.add(Dense(32, activation='sigmoid'))
model.add(Dense(numclasses, activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics =['accuracy'])

history= model.fit(xtrain, ytrain, validation_split=0.3,epochs=150,batch_size=50)